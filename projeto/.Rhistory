train = read.csv("poker-hand_training-true.csv")
train = read.csv("./poker-hand_training-true.csv")
train = read.csv("./poker-hand-training-true.csv")
train = read.csv("./poker-hand-training-true.csv")
setwd("~/Documents/workspace/aeed_2018")
train <- read.csv("./poker-hand-training-true.csv")
setwd("~/Documents/workspace/aaed_2018")
train <- read.csv("./poker-hand-training-true.csv")
labels = as.factor(train$hand)
train = train[,1:10]
View(train)
train <- read.csv("./poker-hand-training-true.csv")
View(train)
colnames(train)
colnames(train) <- c("S1","C1","S2","C2","S3","C3","S4","C4","S5","C5","hand")
View(train)
labels = as.factor(train$hand)
train = train[,1:10]
#Split training set into partial training set and validation set
part_train = train[1:18000,]
valid = train[-1:-18000,]
labels_part = labels[1:18000]
valid_labels = labels[-1:-18000]
library(kernlab)
svm <- ksvm(labels_part ~ ., data = part_train,C = 100,cache = 100,type = "C-svc")
svm
y_pred <- predict(svm, newdata=valid, type="class")
y_pred <- predict(svm, newdata=valid)
valid_labels
View(valid)
actual = as.data.frame(table(valid_labels))
names(actual) = c("Actual","ActualFreq")
View(actual)
confusion = as.data.frame(table(valid_labels, y_pred))
names(confusion) = c("Actual","Predicted","Freq")
View(confusion)
confusion = merge(confusion, actual, by=c("hand"))
confusion = merge(confusion, actual)
View(confusion)
confusion$Percent = confusion$Freq/confusion$ActualFreq*100
tile <- ggplot() +
geom_tile(aes(x=Actual, y=Predicted,fill=Percent),data=confusion, color="black",size=0.1) +
labs(x="Actual",y="Predicted")
tile = tile +
geom_text(aes(x=Actual,y=Predicted, label=sprintf("%.1f", Percent)),
data=confusion, size=3, colour="black") +
scale_fill_gradient(low="grey",high="red")
tile <- ggplot()
require(ggplot2)
library(ggplot2)
tile <- ggplot() +
geom_tile(aes(x=Actual, y=Predicted,fill=Percent),data=confusion, color="black",size=0.1) +
labs(x="Actual",y="Predicted")
tile = tile +
geom_text(aes(x=Actual,y=Predicted, label=sprintf("%.1f", Percent)),
data=confusion, size=3, colour="black") +
scale_fill_gradient(low="grey",high="red")
tile = tile +
geom_tile(aes(x=Actual,y=Predicted),data=subset(confusion, as.character(Actual)==as.character(Predicted)), color="black",size=0.3, fill="black", alpha=0)
tile
View(confusion)
library(ggplot2)
plot_confusion_matrix <- function(true_labels, predicted_labels) {
#compute frequency of actual categories
actual = as.data.frame(table(true_labels))
names(actual) = c("Actual","ActualFreq")
#build confusion matrix
confusion = as.data.frame(table(true_labels, predicted_labels))
names(confusion) = c("Actual","Predicted","Freq")
#calculate percentage of test cases based on actual frequency
confusion = merge(confusion, actual)
confusion$Percent = confusion$Freq/confusion$ActualFreq*100
#render plot
# we use three different layers
# first we draw tiles and fill color based on percentage of test cases
tile <- ggplot() +
geom_tile(aes(x=Actual, y=Predicted,fill=Percent),data=confusion, color="black",size=0.1) +
labs(x="Actual",y="Predicted")
tile = tile +
geom_text(aes(x=Actual,y=Predicted, label=sprintf("%.1f", Percent)),
data=confusion, size=3, colour="black") +
scale_fill_gradient(low="grey",high="red")
# lastly we draw diagonal tiles. We use alpha = 0 so as not to hide previous layers
# but use size=0.3 to highlight border
tile = tile +
geom_tile(aes(x=Actual,y=Predicted),
data=subset(confusion, as.character(Actual)==as.character(Predicted)),
color="black",size=0.3, fill="black", alpha=0)
#render
tile
}
plot_confusion_matrix(valid_labels, y_pred)
source("plot_confusion_matrix.R")
plot_confusion_matrix(valid_labels, y_pred)
library("e1071")
install.packages("e1071")
library("e1071")
library("e1071")
clf <- svm(formula = labels_part ~ ., data = part_train,
kernel = "radial", gamma = 0.1, cost = 1)
clf
y_pred <- predict(clf, newdata=valid)
source("plot_confusion_matrix.R")
plot_confusion_matrix(valid_labels, y_pred)
